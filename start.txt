package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/gocolly/colly"
	"github.com/jrudio/go-plex-client"
	"gopkg.in/yaml.v2"
)

///////////////////////////////////////
//         Data Structures           //
///////////////////////////////////////

// initializing a data structure to keep the scraped data
type videoAgeRating struct {
	Country string
	Rating  string
	IMDbID  string
}

// plexLibraryListData struct to match the JSON structure
type plexLibraryListData struct {
	MediaContainer struct {
		Directory []struct {
			Key   string `json:"key"`
			Title string `json:"title"`
			UUID  string `json:"uuid"`
		} `json:"Directory"`
	} `json:"MediaContainer"`
}

// plexLibraryItemsData struct to match the JSON structure
type plexLibraryItemsData struct {
	MediaContainer struct {
		Metadata []struct {
			RatingKey string `json:"ratingKey"`
			Title     string `json:"title"`
		} `json:"Metadata"`
	} `json:"MediaContainer"`
}

// plexLibraryItemsData struct to match the JSON structure
type plexLibraryItemMetadataData struct {
	MediaContainer struct {
		Metadata []struct {
			RatingKey     string `json:"ratingKey"`
			ContentRating string `json:"contentRating"`
			GUID          []struct {
				ID string `json:"id"`
			} `json:"Guid"`
			// IMDBID string `json:"IMDBID, omitempty"`
			// TMDBID string `json:"TMDBID, omitempty"`
			// TVDBID string `json:"TVDBID, omitempty"`
		} `json:"Metadata"`
	} `json:"MediaContainer"`
}

///////////////////////////////////////
//         Importing Vars            //
///////////////////////////////////////

// Config represents the configuration structure
type Config struct {
	PlexToken string `yaml:"plex_token"`
}

func main() {
	imdbScraper()
	plexLibraryList()
	plexLibraryItems()
	plexLibraryItemMetadata()
}

func imdbScraper() {
	// initializing the slice of structs to store the data to scrape
	var videoAgeRatings []videoAgeRating

	// Extract IMDb ID from the URL
	imdbURL := "https://www.imdb.com/title/tt15314262/parentalguide"
	imdbIDParts := strings.Split(imdbURL, "/")
	var imdbID string
	for i, part := range imdbIDParts {
		if part == "title" && i+1 < len(imdbIDParts) {
			imdbID = imdbIDParts[i+1]
			break
		}
	}

	// creating a new Colly instance
	c := colly.NewCollector()

	// scraping logic
	c.OnHTML("section#certificates", func(e *colly.HTMLElement) {
		e.ForEach("ul.ipl-inline-list li.ipl-inline-list__item a[href*=\"/search/title?certificates=NZ:\"]", func(_ int, elem *colly.HTMLElement) {
			// Extract text from the <a> element
			text := elem.Text

			// Split the text by colon
			parts := strings.Split(text, ":")

			// Ensure there are two parts (country and rating)
			if len(parts) == 2 {
				country := strings.TrimSpace(parts[0])
				rating := strings.TrimSpace(parts[1])

				// Create a new videoAgeRating struct
				videoAgeRating := videoAgeRating{
					Country: country,
					Rating:  rating,
					IMDbID:  imdbID,
				}

				// Append the struct to the slice
				videoAgeRatings = append(videoAgeRatings, videoAgeRating)
			}
		})
	})

	// visiting the target page
	c.Visit(imdbURL)

	// opening the CSV file
	file, err := os.Create("ratings.csv")
	if err != nil {
		log.Fatalln("Failed to create output CSV file", err)
	}
	defer file.Close()

	// Create a CSV writer
	writer := csv.NewWriter(file)
	defer writer.Flush()

	// Write header to CSV file
	header := []string{"IMDbID", "Country", "Rating"}
	err = writer.Write(header)
	if err != nil {
		fmt.Println("Error writing header to CSV file:", err)
		return
	}

	// Write data to CSV file
	for _, videoAgeRating := range videoAgeRatings {
		// Convert videoAgeRating to an array of strings
		record := []string{
			videoAgeRating.IMDbID,
			videoAgeRating.Country,
			videoAgeRating.Rating,
		}

		// Write a CSV record to the output file
		err := writer.Write(record)
		if err != nil {
			fmt.Println("Error writing data to CSV file:", err)
			return
		}
	}

	fmt.Println("Data has been written to ratings_imdb.csv")
}
func plexLibraryList() {
	// Open the config file
	configFile, err := os.Open("vars.yaml")
	if err != nil {
		fmt.Println("Error opening config file:", err)
		return
	}
	defer configFile.Close()

	// Decode the config YAML
	var config Config
	decoder := yaml.NewDecoder(configFile)
	err = decoder.Decode(&config)
	if err != nil {
		fmt.Println("Error decoding config YAML:", err)
		return
	}

	// Make HTTP GET request to the API
	url := "http://10.90.3.204:32400/library/sections"
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Set required headers
	req.Header.Set("Accept", "application/json")
	req.Header.Set("X-Plex-Token", config.PlexToken)

	// Send HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Decode the JSON plexLibraryListData
	var data plexLibraryListData
	err = json.NewDecoder(resp.Body).Decode(&data)
	if err != nil {
		fmt.Println("Error decoding JSON:", err)
		return
	}

	// Create a CSV file
	file, err := os.Create("plex_libraries.csv")
	if err != nil {
		fmt.Println("Error creating CSV file:", err)
		return
	}
	defer file.Close()

	// Create a CSV writer
	writer := csv.NewWriter(file)
	defer writer.Flush()

	// Write header to CSV file
	header := []string{"Title", "Key", "UUID"}
	err = writer.Write(header)
	if err != nil {
		fmt.Println("Error writing header to CSV file:", err)
		return
	}

	// Write data to CSV file
	for _, item := range data.MediaContainer.Directory {
		err := writer.Write([]string{item.Title, item.Key, item.UUID})
		if err != nil {
			fmt.Println("Error writing data to CSV file:", err)
			return
		}
	}

	fmt.Println("Data has been written to plex_libraries.csv")
}
func plexLibraryItems() {
	// Open the config file
	configFile, err := os.Open("vars.yaml")
	if err != nil {
		fmt.Println("Error opening config file:", err)
		return
	}
	defer configFile.Close()

	// Decode the config YAML
	var config Config
	decoder := yaml.NewDecoder(configFile)
	err = decoder.Decode(&config)
	if err != nil {
		fmt.Println("Error decoding config YAML:", err)
		return
	}

	// Make HTTP GET request to the API
	url := "http://10.90.3.204:32400/library/sections/14/all"
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Set required headers
	req.Header.Set("Accept", "application/json")
	req.Header.Set("X-Plex-Token", config.PlexToken)

	// Send HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Decode the JSON plexLibraryItemsData
	var data plexLibraryItemsData
	err = json.NewDecoder(resp.Body).Decode(&data)
	if err != nil {
		fmt.Println("Error decoding JSON:", err)
		return
	}

	// Create a CSV file
	file, err := os.Create("plex_library-items.csv")
	if err != nil {
		fmt.Println("Error creating CSV file:", err)
		return
	}
	defer file.Close()

	// Create a CSV writer
	writer := csv.NewWriter(file)
	defer writer.Flush()

	// Write header to CSV file
	header := []string{"Title", "RatingKey"}
	err = writer.Write(header)
	if err != nil {
		fmt.Println("Error writing header to CSV file:", err)
		return
	}

	// Write data to CSV file
	for _, item := range data.MediaContainer.Metadata {
		err := writer.Write([]string{item.Title, item.RatingKey})
		if err != nil {
			fmt.Println("Error writing data to CSV file:", err)
			return
		}
	}

	fmt.Println("Data has been written to plex_library_items.csv")
}
func plexLibraryItemMetadata() {
	// Open the config file
	configFile, err := os.Open("vars.yaml")
	if err != nil {
		fmt.Println("Error opening config file:", err)
		return
	}
	defer configFile.Close()

	// Decode the config YAML
	var config Config
	decoder := yaml.NewDecoder(configFile)
	err = decoder.Decode(&config)
	if err != nil {
		fmt.Println("Error decoding config YAML:", err)
		return
	}

	// Make HTTP GET request to the API
	url := "http://10.90.3.204:32400/library/metadata/4374"
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Set required headers
	req.Header.Set("Accept", "application/json")
	req.Header.Set("X-Plex-Token", config.PlexToken)

	// Send HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Decode the JSON plexLibraryItemMetadataData
	var data plex.MediaMetadata
	// bytes, err := io.ReadAll(resp.Body)
	// if err != nil {
	// 	fmt.Println("Error decoding JSON:", err)
	// 	return
	// }
	// fmt.Println(string(bytes))
	err = json.NewDecoder(resp.Body).Decode(&data)
	if err != nil {
		fmt.Println("Error decoding JSON:", err)
		return
	}

	// Create a CSV file
	file, err := os.Create("plex_library-items-metadata.csv")
	if err != nil {
		fmt.Println("Error creating CSV file:", err)
		return
	}
	defer file.Close()

	// Create a CSV writer
	writer := csv.NewWriter(file)
	defer writer.Flush()

	// Write header to CSV file
	header := []string{"RatingKey", "ContentRating", "IMDBID", "TMDBID", "TVDBID"}
	err = writer.Write(header)
	if err != nil {
		fmt.Println("Error writing header to CSV file:", err)
		return
	}

	// Write data to CSV file
	for _, item := range data.MediaContainer.Metadata {
		// for _, guid := range item.GUID {
		// 	id := strings.TrimPrefix(guid.ID, "imdb://")
		// 	if strings.HasPrefix(guid.ID, "imdb://") {
		// 		item.IMDBID = id
		// 	} else if strings.HasPrefix(guid.ID, "tmdb://") {
		// 		item.TMDBID = id
		// 	} else if strings.HasPrefix(guid.ID, "tvdb://") {
		// 		item.TVDBID = id
		// 	}
		// }

		// Write the data to CSV file
		err := writer.Write([]string{
			item.RatingKey,
			item.ContentRating,
			// item.IMDBID,
			// item.TMDBID,
			// item.TVDBID,
		})
		if err != nil {
			fmt.Println("Error writing data to CSV file:", err)
			return
		}
	}

	fmt.Println("Data has been written to plex_library_items_metadata.csv")
}
