// type ContentWithRating struct {
// 	Content []plex.Metadata
// 	Guids   []plex.Metadata
// 	IMDB    string
// 	TMDB    string
// 	TVDB    string
// }

// type videoAgeRating struct {
// 	Country string
// 	Rating  string
// 	IMDbID  string
// }

// func AssemblingExternalDatabaseIds(databaseIDs plex.MediaMetadata, plexConnection *plex.Plex) ([]ContentWithRating, error) {
// 	var results = []ContentWithRating{}
// 	for _, ExternalDatabaseIds := range databaseIDs.MediaContainer.Metadata {
// 		ContentWithRating := ContentWithRating{
// 			IMDB: ExternalDatabaseIds.AltGUIDs[0].ID,
// 			TMDB: ExternalDatabaseIds.AltGUIDs[1].ID,
// 			TVDB: ExternalDatabaseIds.AltGUIDs[2].ID,
// 		}
// 		searchResults, err := plexConnection.GetLibraryContent(ExternalDatabaseIds.AltGUIDs[0].ID, "")
// 		if err != nil {
// 			return nil, err
// 		}
// 		ContentWithRating.Guids = searchResults.MediaContainer.Metadata
// 		results = append(results, ContentWithRating)
// 	}
// 	return results, nil
// }

// func imdbScraper() {
// 	// initializing the slice of structs to store the data to scrape
// 	var videoAgeRatings []videoAgeRating

// 	// Extract IMDb ID from the URL
// 	imdbURL := "https://www.imdb.com/title/tt15314262/parentalguide"
// 	imdbIDParts := strings.Split(imdbURL, "/")
// 	var imdbID string
// 	for i, part := range imdbIDParts {
// 		if part == "title" && i+1 < len(imdbIDParts) {
// 			imdbID = imdbIDParts[i+1]
// 			break
// 		}
// 	}

// 	// creating a new Colly instance
// 	c := colly.NewCollector()

// 	// scraping logic
// 	c.OnHTML("section#certificates", func(e *colly.HTMLElement) {
// 		e.ForEach("ul.ipl-inline-list li.ipl-inline-list__item a[href*=\"/search/title?certificates=NZ:\"]", func(_ int, elem *colly.HTMLElement) {
// 			// Extract text from the <a> element
// 			text := elem.Text

// 			// Split the text by colon
// 			parts := strings.Split(text, ":")

// 			// Ensure there are two parts (country and rating)
// 			if len(parts) == 2 {
// 				country := strings.TrimSpace(parts[0])
// 				rating := strings.TrimSpace(parts[1])

// 				// Create a new videoAgeRating struct
// 				videoAgeRating := videoAgeRating{
// 					Country: country,
// 					Rating:  rating,
// 					IMDbID:  imdbID,
// 				}

// 				// Append the struct to the slice
// 				videoAgeRatings = append(videoAgeRatings, videoAgeRating)
// 			}
// 		})
// 	})

// 	// visiting the target page
// 	c.Visit(imdbURL)
// }